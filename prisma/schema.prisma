// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String           @id @default(cuid())
  username        String           @unique
  password        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  ownedProjects   Project[]        @relation("ProjectOwner")
  projectMembers  ProjectMember[]
  assignedTasks   Task[]
}

model Project {
  id          String           @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  ownerId     String
  owner       User             @relation("ProjectOwner", fields: [ownerId], references: [id])
  members     ProjectMember[]
  tasks       Task[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String   // 'manager' | 'developer' | 'qa'
  joinedAt  DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([projectId, userId])
}

model Task {
  id          String      @id @default(cuid())
  projectId   String
  title       String
  description String?
  status      String      @default("Todo") // 'Todo' | 'In Progress' | 'Done'
  priority    String      @default("Medium") // 'Low' | 'Medium' | 'High'
  assigneeId  String?
  dueDate     DateTime?
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?       @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  taskLabels  TaskLabel[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Label {
  id         String      @id @default(cuid())
  name       String      @unique
  color      String
  taskLabels TaskLabel[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model TaskLabel {
  id        String   @id @default(cuid())
  taskId    String
  labelId   String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([taskId, labelId])
}
